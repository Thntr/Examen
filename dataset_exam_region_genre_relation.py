import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.drawing.image import Image
import os
import io


def analizar_relacion_region_genero(archivo_excel, archivo_salida="analisis_region_genero.xlsx"):
    """
    Analiza la relaci√≥n entre regi√≥n y g√©nero de consumo de video

    Args:
        archivo_excel (str): Ruta del archivo Excel de entrada
        archivo_salida (str): Nombre del archivo Excel de salida
    """

    try:
        # Verificar si el archivo existe
        if not os.path.exists(archivo_excel):
            print(f"‚ùå Error: El archivo '{archivo_excel}' no existe.")
            return None

        # Leer la hoja "Dataset"
        try:
            df = pd.read_excel(archivo_excel, sheet_name='Dataset')
        except:
            # Si no encuentra por nombre, intentar por √≠ndice (segunda hoja)
            try:
                df = pd.read_excel(archivo_excel, sheet_name=1)
                print("‚ö†Ô∏è  Hoja 'Dataset' no encontrada, usando la segunda hoja del archivo")
            except Exception as e:
                print(f"‚ùå Error al leer el archivo Excel: {e}")
                return None

        # Verificar si existen las columnas necesarias
        columnas_requeridas = ['REGION', 'GENRE']
        for columna in columnas_requeridas:
            if columna not in df.columns:
                print(f"‚ùå Error: No se encontr√≥ la columna '{columna}' en la hoja")
                print(f"Columnas disponibles: {list(df.columns)}")
                return None

        # Limpiar y preparar los datos
        df_clean = df[['REGION', 'GENRE']].copy()
        df_clean['REGION'] = df_clean['REGION'].astype(str).str.strip()
        df_clean['GENRE'] = df_clean['GENRE'].astype(str).str.strip()
        df_clean = df_clean.dropna()
        df_clean = df_clean[(df_clean['REGION'] != '') & (df_clean['REGION'] != 'nan')]
        df_clean = df_clean[(df_clean['GENRE'] != '') & (df_clean['GENRE'] != 'nan')]

        # Calcular estad√≠sticas generales
        total_registros = len(df_clean)
        regiones_unicas = df_clean['REGION'].nunique()
        generos_unicos = df_clean['GENRE'].nunique()

        print("=" * 70)
        print("üåç AN√ÅLISIS DE RELACI√ìN REGI√ìN-G√âNERO")
        print("=" * 70)
        print(f"üìä Total de registros v√°lidos: {total_registros:,}")
        print(f"üó∫Ô∏è  Regiones √∫nicas: {regiones_unicas}")
        print(f"üé≠ G√©neros √∫nicos: {generos_unicos}")
        print("=" * 70)

        # Crear tabla de contingencia (frecuencias cruzadas)
        tabla_contingencia = pd.crosstab(df_clean['REGION'], df_clean['GENRE'])

        # Calcular porcentajes por regi√≥n
        tabla_porcentajes = tabla_contingencia.div(tabla_contingencia.sum(axis=1), axis=0) * 100
        tabla_porcentajes = tabla_porcentajes.round(2)

        # Encontrar top g√©neros por regi√≥n
        top_generos_por_region = []

        for region in tabla_contingencia.index:
            generos_region = tabla_contingencia.loc[region]
            total_region = generos_region.sum()

            # Top 3 g√©neros
            top3 = generos_region.nlargest(3)

            for i, (genero, count) in enumerate(top3.items(), 1):
                porcentaje = (count / total_region) * 100
                top_generos_por_region.append({
                    'REGION': region,
                    'RANKING': i,
                    'G√âNERO': genero,
                    'VISUALIZACIONES': count,
                    'PORCENTAJE': round(porcentaje, 2),
                    'TOTAL_REGION': total_region
                })

        df_top = pd.DataFrame(top_generos_por_region)

        # Estad√≠sticas por regi√≥n
        stats_region = pd.DataFrame({
            'REGION': tabla_contingencia.index,
            'TOTAL_VISUALIZACIONES': tabla_contingencia.sum(axis=1),
            'G√âNEROS_√öNICOS': (tabla_contingencia > 0).sum(axis=1),
            'G√âNERO_M√ÅS_POPULAR': tabla_contingencia.idxmax(axis=1),
            'VISTAS_G√âNERO_TOP': tabla_contingencia.max(axis=1),
            'PORCENTAJE_G√âNERO_TOP': [round((max(row) / sum(row)) * 100, 2) for _, row in tabla_contingencia.iterrows()]
        })

        # Calcular diversidad de consumo (√≠ndice de Herfindahl-Hirschman)
        def calcular_hhi(porcentajes):
            return sum([p ** 2 for p in porcentajes])

        stats_region['√çNDICE_DIVERSIDAD'] = [
            calcular_hhi(tabla_porcentajes.loc[region].values) for region in stats_region['REGION']
        ]

        # Clasificar diversidad
        stats_region['NIVEL_DIVERSIDAD'] = pd.cut(stats_region['√çNDICE_DIVERSIDAD'],
                                                  bins=[0, 1500, 2500, 10000],
                                                  labels=['Alta Diversidad', 'Media Diversidad', 'Baja Diversidad'])

        # Mostrar resultados en consola
        print("üèÜ TOP 1 G√âNERO POR REGI√ìN:")
        print("-" * 60)
        top1_regiones = df_top[df_top['RANKING'] == 1].sort_values('PORCENTAJE', ascending=False)

        for i, (_, row) in enumerate(top1_regiones.head(10).iterrows(), 1):
            print(f"{i:2d}. {row['REGION']:<15} ‚Üí {row['G√âNERO']:<20} ({row['PORCENTAJE']}%)")

        print("=" * 70)
        print("üìà ESTAD√çSTICAS GENERALES:")
        print("-" * 40)
        print(f"Regi√≥n con mayor consumo: {stats_region.loc[stats_region['TOTAL_VISUALIZACIONES'].idxmax(), 'REGION']}")
        print(f"Regi√≥n con menor consumo: {stats_region.loc[stats_region['TOTAL_VISUALIZACIONES'].idxmin(), 'REGION']}")
        print(f"G√©nero m√°s popular global: {tabla_contingencia.sum().idxmax()}")
        print(f"Regi√≥n m√°s diversa: {stats_region.loc[stats_region['√çNDICE_DIVERSIDAD'].idxmin(), 'REGION']}")
        print(f"Regi√≥n menos diversa: {stats_region.loc[stats_region['√çNDICE_DIVERSIDAD'].idxmax(), 'REGION']}")

        # Crear archivo Excel con an√°lisis completo
        with pd.ExcelWriter(archivo_salida, engine='openpyxl') as writer:
            # Hoja 1: Tabla de contingencia (frecuencias absolutas)
            tabla_contingencia.to_excel(writer, sheet_name='Frecuencias Absolutas')

            # Hoja 2: Tabla de porcentajes
            tabla_porcentajes.to_excel(writer, sheet_name='Porcentajes por Regi√≥n')

            # Hoja 3: Top g√©neros por regi√≥n
            df_top.to_excel(writer, sheet_name='Top G√©neros por Regi√≥n', index=False)

            # Hoja 4: Estad√≠sticas por regi√≥n
            stats_region.to_excel(writer, sheet_name='Estad√≠sticas Regiones', index=False)

            # Hoja 5: Resumen ejecutivo
            resumen_data = {
                'M√âTRICA': [
                    'Total de registros analizados',
                    'Regiones √∫nicas identificadas',
                    'G√©neros √∫nicos identificados',
                    'Regi√≥n con mayor consumo total',
                    'Regi√≥n con menor consumo total',
                    'G√©nero m√°s popular globalmente',
                    'Regi√≥n con mayor diversidad',
                    'Regi√≥n con menor diversidad',
                    'Porcentaje promedio del g√©nero top',
                    'Regiones con alta diversidad',
                    'Regiones con baja diversidad'
                ],
                'VALOR': [
                    total_registros,
                    regiones_unicas,
                    generos_unicos,
                    stats_region.loc[stats_region['TOTAL_VISUALIZACIONES'].idxmax(), 'REGION'],
                    stats_region.loc[stats_region['TOTAL_VISUALIZACIONES'].idxmin(), 'REGION'],
                    tabla_contingencia.sum().idxmax(),
                    stats_region.loc[stats_region['√çNDICE_DIVERSIDAD'].idxmin(), 'REGION'],
                    stats_region.loc[stats_region['√çNDICE_DIVERSIDAD'].idxmax(), 'REGION'],
                    f"{stats_region['PORCENTAJE_G√âNERO_TOP'].mean():.1f}%",
                    len(stats_region[stats_region['NIVEL_DIVERSIDAD'] == 'Alta Diversidad']),
                    len(stats_region[stats_region['NIVEL_DIVERSIDAD'] == 'Baja Diversidad'])
                ]
            }
            df_resumen = pd.DataFrame(resumen_data)
            df_resumen.to_excel(writer, sheet_name='Resumen Ejecutivo', index=False)

            # Crear y guardar gr√°ficos
            if len(stats_region) <= 15:  # Solo si hay pocas regiones
                # Gr√°fico de heatmap
                plt.figure(figsize=(12, 8))
                import seaborn as sns

                # Normalizar para mejor visualizaci√≥n
                tabla_normalizada = tabla_contingencia.div(tabla_contingencia.sum(axis=1), axis=0)

                sns.heatmap(tabla_normalizada, cmap='YlOrRd', annot=False, fmt='.2f')
                plt.title('Distribuci√≥n de G√©neros por Regi√≥n (Normalizado)')
                plt.xticks(rotation=45, ha='right')
                plt.tight_layout()

                img_heatmap = io.BytesIO()
                plt.savefig(img_heatmap, format='png', dpi=300, bbox_inches='tight')
                img_heatmap.seek(0)
                plt.close()

            # Ajustar anchos de columnas
            for sheet_name in writer.sheets:
                worksheet = writer.sheets[sheet_name]
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 35)
                    worksheet.column_dimensions[column_letter].width = adjusted_width

        print(f"\nüíæ Archivo Excel generado: {archivo_salida}")
        print("üìã Hojas incluidas:")
        print("   - Frecuencias Absolutas: Tabla de contingencia completa")
        print("   - Porcentajes por Regi√≥n: Distribuci√≥n porcentual")
        print("   - Top G√©neros por Regi√≥n: Ranking top 3 por regi√≥n")
        print("   - Estad√≠sticas Regiones: M√©tricas por regi√≥n")
        print("   - Resumen Ejecutivo: Hallazgos principales")

        # Respuesta a la pregunta principal
        print("=" * 70)
        print("‚ùì ¬øEXISTE UNA RELACI√ìN ENTRE REGI√ìN Y G√âNERO?")
        print("=" * 70)

        # Analizar variaci√≥n entre regiones
        variacion_porcentaje = stats_region['PORCENTAJE_G√âNERO_TOP'].std()

        if variacion_porcentaje > 15:
            print("‚úÖ S√ç, existe una fuerte relaci√≥n entre regi√≥n y g√©nero")
            print("   üìä Se observan patrones geogr√°ficos claros en las preferencias")
        elif variacion_porcentaje > 5:
            print("‚úÖ S√ç, existe una relaci√≥n moderada entre regi√≥n y g√©nero")
            print("   üìä Hay algunas diferencias regionales en las preferencias")
        else:
            print("‚ùå NO, no existe una relaci√≥n fuerte entre regi√≥n y g√©nero")
            print("   üìä Las preferencias son similares across todas las regiones")

        print(f"   üìà Variaci√≥n en preferencias: {variacion_porcentaje:.1f}%")

        return {
            'tabla_contingencia': tabla_contingencia,
            'tabla_porcentajes': tabla_porcentajes,
            'top_generos': df_top,
            'stats_region': stats_region
        }

    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()
        return None


def main():
    """Funci√≥n principal"""

    print("üåç ANALIZADOR DE RELACI√ìN REGI√ìN-G√âNERO")
    print("=" * 50)

    # Solicitar la ruta del archivo Excel
    archivo = input("Ingrese la ruta del archivo Excel: ").strip().strip('"')

    if not archivo:
        print("‚ùå Debe ingresar una ruta v√°lida")
        return

    # Nombre del archivo de salida
    archivo_salida = input(
        "Ingrese el nombre del archivo de salida (Enter para 'analisis_region_genero.xlsx'): ").strip()
    if not archivo_salida:
        archivo_salida = "analisis_region_genero.xlsx"

    # Ejecutar el an√°lisis
    resultado = analizar_relacion_region_genero(archivo, archivo_salida)

    if resultado is not None:
        print("\n‚úÖ An√°lisis completado exitosamente!")


# Ejecutar el script directamente
if __name__ == "__main__":
    main()